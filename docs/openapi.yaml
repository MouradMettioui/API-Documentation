openapi: 3.0.0
info:
    title: 'My API'
    version: 1.0.0
    description: 'Documentation of my API'
paths:
    /api/add-camera:
        post:
            summary: 'Create a new camera'
            description: 'This route allows the user to create a new camera with details such as availability, camera name, camera number, and position (latitude and longitude).'
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {available: {type: string, description: 'Availability status of the camera (e.g., ''true'' or ''false'')'}, cameraname: {type: string, description: 'Name of the camera'}, cameranumber: {type: string, description: 'Unique camera number'}, position: {type: array, items: {type: number}, description: 'Array representing the latitude and longitude of the camera''s position', example: [48.8566, 2.3522]}}, required: [available, cameraname, cameranumber, position]}}}}
            responses: {'200': {description: 'Camera successfully created', content: {application/json: {schema: {type: object, properties: {id: {type: integer, description: 'The unique ID of the camera'}, available: {type: string, description: 'Availability status of the camera'}, cameraname: {type: string, description: 'Name of the camera'}, cameranumber: {type: string, description: 'Unique camera number'}, position: {type: array, items: {type: number}, description: 'The position (latitude, longitude) of the camera'}}}}}}, '400': {description: 'Bad Request - Missing or invalid data'}, '500': {description: 'Internal server error'}}
    /api/cameras:
        get:
            summary: 'Retrieve a list of all cameras'
            description: 'This route allows the user to retrieve all camera records stored in the database.'
            responses: {'200': {description: 'List of cameras', content: {application/json: {schema: {type: array, items: {type: object, properties: {id: {type: integer, description: 'The unique ID of the camera'}, available: {type: string, description: 'Availability status of the camera'}, cameraname: {type: string, description: 'Name of the camera'}, cameranumber: {type: string, description: 'Unique camera number'}, position: {type: array, items: {type: number}, description: 'The position (latitude, longitude) of the camera'}}}}}}}, '500': {description: 'Internal server error'}}
    /api/create-video:
        post:
            summary: 'Create a new video record'
            description: 'This route allows the user to create a new video record by providing the camera number and number plate.'
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {cameranumber: {type: string, description: 'The unique identifier of the camera that captured the video.'}, numberplate: {type: string, description: 'The number plate of the vehicle captured in the video.'}, typevehicule: {type: string, description: 'The type of the vehicle recorded in the video'}, createat: {type: string, format: date-time, description: 'The timestamp of when the video was created'}}, required: [cameranumber, numberplate, typevehicule]}}}}
            responses: {'201': {description: 'Video successfully created', content: {application/json: {schema: {type: object, properties: {id: {type: integer, description: 'The unique ID of the video'}, cameranumber: {type: string, description: 'The camera number associated with the video'}, numberplate: {type: string, description: 'The number plate recorded in the video'}, typevehicule: {type: string, description: 'The type of the vehicle recorded in the video'}, createat: {type: string, format: date-time, description: 'The timestamp of when the video was created'}}}}}}, '400': {description: 'Missing required fields'}, '500': {description: 'Internal server error'}}
    '/api/videos/{cameranumber}':
        get:
            summary: 'Retrieve videos by camera number'
            description: 'Fetch all video records associated with the specified camera number.'
            parameters: [{name: cameranumber, in: path, required: true, schema: {type: string}, description: 'The unique identifier of the camera whose videos are to be retrieved.'}]
            responses: {'200': {description: 'A list of video records for the specified camera number.', content: {application/json: {schema: {type: object, properties: {data: {type: array, items: {type: object, properties: {id: {type: integer, description: 'The unique ID of the video.'}, cameranumber: {type: string, description: 'The camera number associated with the video.'}, numberplate: {type: string, description: 'The number plate recorded in the video.'}, typevehicule: {type: string, description: 'The type of vehicle captured in the video.'}, createat: {type: string, format: date-time, description: 'The creation timestamp of the video.'}}}}}}}}}, '404': {description: 'No videos found for the given camera number.'}, '500': {description: 'Internal server error.'}}
    /api/videos:
        get:
            summary: 'Fetch all video records'
            description: 'This route retrieves all video records from the database.'
            responses: {'200': {description: 'A list of video records for the specified camera number.', content: {application/json: {schema: {type: object, properties: {data: {type: array, items: {type: object, properties: {id: {type: integer, description: 'The unique ID of the video.'}, cameranumber: {type: string, description: 'The camera number associated with the video.'}, numberplate: {type: string, description: 'The number plate recorded in the video.'}, typevehicule: {type: string, description: 'The type of vehicle captured in the video.'}, createat: {type: string, format: date-time, description: 'The creation timestamp of the video.'}}}}}}}}}, '404': {description: 'No videos found for the given camera number.'}, '500': {description: 'Internal server error.'}}
components: {}
tags: []
